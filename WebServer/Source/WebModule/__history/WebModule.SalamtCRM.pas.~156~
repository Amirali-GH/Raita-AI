Unit WebModule.SalamtCRM;

Interface

Uses
    IdHashSHA,
    System.SysUtils,
    System.Classes,
    Web.HTTPApp,
    MVCFramework,
    MVCFramework.Container,
    MVCFramework.Swagger.Commons;

Const
    BASE_API_V1 = '/api/v1';
    PAGE_SIZE = 20;
Type
    TWMSalamtCustomer = class(TWebModule)
        procedure WebModuleCreate(Sender: TObject);
        procedure WebModuleDestroy(Sender: TObject);

    Private
        fMVC: TMVCEngine;
        procedure StaticFilesRules(const Context: TWebContext; var PathInfo: String;
          var Handled: Boolean);
    End;

var
  WebModuleClass: TComponentClass = TWMSalamtCustomer;

implementation

{$R *.dfm}


Uses
    IdGlobal,
    System.IOUtils,
    MVCFramework.JWT,
    MVCFramework.Commons,
    MVCFramework.Middleware.ActiveRecord,
    MVCFramework.Middleware.Session,
    MVCFramework.Middleware.Redirect,
    MVCFramework.Middleware.StaticFiles,
    MVCFramework.Middleware.Analytics,
    MVCFramework.Middleware.Trace,
    MVCFramework.Middleware.CORS,
    MVCFramework.Middleware.ETag,
    MVCFramework.Middleware.JWT,
    MVCFramework.Middleware.Compression,
    MVCFramework.Middleware.Swagger,
    System.StrUtils,
    System.RegularExpressions;

Procedure TWMSalamtCustomer.WebModuleCreate(Sender: TObject);
Var
    WWWPath_fa, WWWPath_en, WWWPath_ab: string;
    SwaggerInfo: TMVCSwaggerInfo;
Begin
    fMVC := TMVCEngine.Create(Self,
      procedure(Config: TMVCConfig)
      begin
        //default content-type
        Config[TMVCConfigKey.DefaultContentType] := dotEnv.Env('dmvc.default.content_type', TMVCConstants.DEFAULT_CONTENT_TYPE);
        //default content charset
        Config[TMVCConfigKey.DefaultContentCharset] := dotEnv.Env('dmvc.default.content_charset', TMVCConstants.DEFAULT_CONTENT_CHARSET);
        //unhandled actions are permitted?
        Config[TMVCConfigKey.AllowUnhandledAction] := dotEnv.Env('dmvc.allow_unhandled_actions', 'false');
        //enables or not system controllers loading (available only from localhost requests)
        Config[TMVCConfigKey.LoadSystemControllers] := dotEnv.Env('dmvc.load_system_controllers', 'true');
        //default view file extension
        Config[TMVCConfigKey.DefaultViewFileExtension] := dotEnv.Env('dmvc.default.view_file_extension', 'html');

        //view path
        Config[TMVCConfigKey.ViewPath] := dotEnv.Env('dmvc.view_path', 'templates');

        //use cache for server side views (use "false" in debug and "true" in production for faster performances
        Config[TMVCConfigKey.ViewCache] := dotEnv.Env('dmvc.view_cache', 'false');

        //Max Record Count for automatic Entities CRUD
        Config[TMVCConfigKey.MaxEntitiesRecordCount] := dotEnv.Env('dmvc.max_entities_record_count', IntToStr(TMVCConstants.MAX_RECORD_COUNT));
        //Enable Server Signature in response
        Config[TMVCConfigKey.ExposeServerSignature] := dotEnv.Env('dmvc.expose_server_signature', 'false');
        //Enable X-Powered-By Header in response
        Config[TMVCConfigKey.ExposeXPoweredBy] := dotEnv.Env('dmvc.expose_x_powered_by', 'true');
        // Max request size in bytes
        Config[TMVCConfigKey.MaxRequestSize] := dotEnv.Env('dmvc.max_request_size', IntToStr(TMVCConstants.DEFAULT_MAX_REQUEST_SIZE));
      end);


    // Controllers
    // Controllers - END

    // Middleware
    // To use memory session uncomment the following line
    // fMVC.AddMiddleware(UseMemorySessionMiddleware);
    //
    // To use file based session uncomment the following line
    // fMVC.AddMiddleware(UseFileSessionMiddleware);
    //
    // To use database based session uncomment the following lines,
    // configure you firedac db connection and create table dmvc_sessions
    // fMVC.AddMiddleware(TMVCActiveRecordMiddleware.Create('firedac_con_def_name'));
    // fMVC.AddMiddleware(UseDatabaseSessionMiddleware);
    fMVC.AddMiddleware(TMVCTraceMiddleware.Create);
    fMVC.AddMiddleware(TMVCCompressionMiddleware.Create);

    fMVC.AddMiddleware(TMVCActiveRecordMiddleware.Create(
        dotEnv.Env('firedac.connection_definition_name', ''),
        dotEnv.Env('firedac.connection_definitions_filename', '')
    ));

    Var lConfigClaim : TJWTClaimsSetup;
    lConfigClaim :=
        procedure(Const JWT: TJWT)
        begin
            JWT.Claims.Issuer := 'MyApp';
            JWT.Claims.ExpirationTime := Now + EncodeTime(1, 0, 0, 0);          // سایر تنظیمات دلخواه...
        end;

    // ساخت اطلاعات Swagger
    SwaggerInfo.Title := 'Raita-AI Server';
    SwaggerInfo.Version := '1.0.0';
    SwaggerInfo.Description := 'API Documentation for Raita-AI';
    SwaggerInfo.TermsOfService := 'http://example.com/terms';
    SwaggerInfo.ContactName := 'AmirAli Ghadiri';
    SwaggerInfo.ContactEmail := 'amiralighadiri1383@gmail.com';
    SwaggerInfo.LicenseName := 'MIT';
    SwaggerInfo.LicenseURL := 'https://opensource.org/licenses/MIT';

    WWWPath_fa := dotEnv.Env('dmvc.www_path_fa', '/WWW-fa');
    WWWPath_en := dotEnv.Env('dmvc.www_path_en', '/WWW-en');
    WWWPath_ab := dotEnv.Env('dmvc.www_path_ab', '/WWW-ab');

    fMVC.AddMiddleware(TMVCStaticFilesMiddleware.Create(
        '/app/en',
        WWWPath_en,
        'index.html',
        False,
        'UTF-8',
        StaticFilesRules
    ));

    fMVC.AddMiddleware(TMVCStaticFilesMiddleware.Create(
        '/app/fa',
        WWWPath_fa,
        'index.html',
        False,
        'UTF-8',
        StaticFilesRules
    ));

    fMVC.AddMiddleware(TMVCStaticFilesMiddleware.Create(
        '/app/ab',
        WWWPath_ab,
        'index.html',
        False,
        'UTF-8',
        StaticFilesRules
    ));

    fMVC.AddMiddleware(TMVCStaticFilesMiddleware.Create(
        '/swaggerui',
        '.\swagger_ui\www',
        'index.html',
        True,
        'UTF-8',
        StaticFilesRules));


    fMVC.AddMiddleware(TMVCStaticFilesMiddleware.Create(
        '/favicon.ico',
        TPath.Combine(WWWPath_fa, 'assets', 'favicon.ico'),
        'favicon.ico',
        False,
        'UTF-8',
        StaticFilesRules
    ));
    // Middleware - END

End;
//________________________________________________________________________________________
Procedure TWMSalamtCustomer.StaticFilesRules(const Context: TWebContext; var PathInfo: String; Var Handled: Boolean);
Begin
    Handled := True;
    Context.Response.CustomHeaders.Values['Cache-Control'] := 'public, max-age=10';
End;
//______________________________________________________________________________
Procedure TWMSalamtCustomer.WebModuleDestroy(Sender: TObject);
Begin
    fMVC.Free;
End;
//________________________________________________________________________________________

end.
